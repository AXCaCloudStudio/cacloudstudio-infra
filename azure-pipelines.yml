# primary ADO pipeline
# primary ADO pipeline
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

variables:
  TF_CLOUD_ORGANIZATION: CaCloudStudio
  TF_WORKSPACE: Infra
  TF_DIR: terraform

stages:
  - stage: Terraform
    jobs:
      - job: TerraformCI
        displayName: "Terraform Plan and Apply"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self

          - script: |
              echo "Branch: $(Build.SourceBranch)"
              echo "Repo directory: $(Build.SourcesDirectory)"
              ls -al $(Build.SourcesDirectory)
              echo "---"
              ls -al $(Build.SourcesDirectory)/terraform || echo "No terraform directory found"
            displayName: "Check repo and terraform directory"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                cd ..
                mkdir -p $HOME/bin
                echo "Downloading..."
                curl -# -L https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -o terraform.zip
                echo "Downloaded."
                echo "Unzipping..."
                ls -lh terraform.zip
                file terraform.zip
                unzip -v terraform.zip
                echo "Unzipped."
                echo "Installing..."
                mv terraform $HOME/bin/
                echo "##vso[task.prependpath]$HOME/bin"
                echo "Installed."
            displayName: "Install Terraform"

          - task: Bash@3
            name: TerraformPlan
            inputs:
              targetType: "inline"
              script: |
                cd $(Build.SourcesDirectory)
                ls -al
                pwd
                terraform --version
                echo "Initializing Terraform with remote backend"
                cd $(Build.SourcesDirectory)/$(TF_DIR)
                pwd
                ls -al
                terraform init
            #     terraform plan -input=false -out=tfplan
            # env:
            #   TF_TOKEN_app_terraform_io: $(TERRAFORM_TOKEN)
            displayName: "Terraform Plan"
