# primary ADO pipeline
# primary ADO pipeline
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

variables:
  TF_CLOUD_ORGANIZATION: CaCloudStudio
  TF_WORKSPACE: Infra
  TF_DIR: terraform

stages:
  - stage: CloneInfraRepo
    displayName: "Clone Infrastructure Repo"
    jobs:
      - job: CloneInfra
        displayName: "Clone Infra Repo"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: self

          - script: |
              echo "Repository checked out successfully."
              echo "DEBUG 100"
              ls -al
            displayName: "Success Message"
  - stage: Terraform
    jobs:
      - job: TerraformCI
        displayName: "Terraform Plan and Apply"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: |
              echo "Downloading..."
              curl -# -L https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -o terraform.zip
              echo "Downloaded."

              ls -lh terraform.zip
              file terraform.zip

              echo "Unzipping..."
              unzip -l terraform.zip
              echo "Unzipped."

              echo "Installing..."
              mkdir -p $HOME/bin
              mv terraform $HOME/bin/
              echo "##vso[task.prependpath]$HOME/bin"
              echo "Installed."
              terraform --version
            displayName: "Install Terraform"

          # - task: Bash@3
          #   name: TerraformPlan
          #   inputs:
          #     targetType: "inline"
          #     script: |
          #       echo "Initializing Terraform with remote backend"
          #       cd $(TF_DIR)
          #       terraform init
          #       terraform plan -input=false -out=tfplan
          #   env:
          #     TF_TOKEN_app_terraform_io: $(TERRAFORM_TOKEN)
          #   displayName: "Terraform Plan"
