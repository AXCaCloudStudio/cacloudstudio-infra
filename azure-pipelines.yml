# primary ADO pipeline
# primary ADO pipeline
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main 

variables:
  TF_CLOUD_ORGANIZATION: CaCloudStudio
  TF_WORKSPACE: Infra
  TF_DIR: /terraform

stages:
- stage: Terraform
  jobs:
  - job: TerraformCI
    displayName: 'Terraform Plan and Apply'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'

    - script: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
        apt-get update && apt-get install terraform -y
      displayName: 'Install Terraform'

    - task: Bash@3
      name: TerraformPlan
      inputs:
        targetType: 'inline'
        script: |
          echo "Setting up Terraform CLI for Terraform Cloud"
          cd $(TF_DIR)
          terraform init -backend-config="organization=$(TF_CLOUD_ORGANIZATION)" -backend-config="workspaces=name=$(TF_WORKSPACE)"
          terraform plan -input=false
      env:
        TERRAFORM_TOKEN: $(TERRAFORM_TOKEN)
      displayName: 'Terraform Plan'

    - task: Bash@3
      name: TerraformApply
      inputs:
        targetType: 'inline'
        script: |
          echo "Running Terraform Apply"
          terraform apply -auto-approve -input=false
      env:
        TERRAFORM_TOKEN: $(TERRAFORM_TOKEN)
      displayName: 'Terraform Apply'
